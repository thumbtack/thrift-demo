// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package demo

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type DemoService interface {
	// Parameters:
	//  - Input
	Calculate(input *CalculateInput) (r float64, err error)
	// Parameters:
	//  - Min
	//  - Max
	//  - Size
	RandomGenerator(min int64, max int64, size int64) (r []int64, err error)
}

type DemoServiceClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewDemoServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *DemoServiceClient {
	return &DemoServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewDemoServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *DemoServiceClient {
	return &DemoServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - Input
func (p *DemoServiceClient) Calculate(input *CalculateInput) (r float64, err error) {
	if err = p.sendCalculate(input); err != nil {
		return
	}
	return p.recvCalculate()
}

func (p *DemoServiceClient) sendCalculate(input *CalculateInput) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("calculate", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := DemoServiceCalculateArgs{
		Input: input,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *DemoServiceClient) recvCalculate() (value float64, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "calculate" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "calculate failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "calculate failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error1 error
		error1, err = error0.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error1
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "calculate failed: invalid message type")
		return
	}
	result := DemoServiceCalculateResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.InvalidInput != nil {
		err = result.InvalidInput
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Min
//  - Max
//  - Size
func (p *DemoServiceClient) RandomGenerator(min int64, max int64, size int64) (r []int64, err error) {
	if err = p.sendRandomGenerator(min, max, size); err != nil {
		return
	}
	return p.recvRandomGenerator()
}

func (p *DemoServiceClient) sendRandomGenerator(min int64, max int64, size int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("randomGenerator", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := DemoServiceRandomGeneratorArgs{
		Min:  min,
		Max:  max,
		Size: size,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *DemoServiceClient) recvRandomGenerator() (value []int64, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "randomGenerator" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "randomGenerator failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "randomGenerator failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error2 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error3 error
		error3, err = error2.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error3
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "randomGenerator failed: invalid message type")
		return
	}
	result := DemoServiceRandomGeneratorResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

type DemoServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      DemoService
}

func (p *DemoServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *DemoServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *DemoServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewDemoServiceProcessor(handler DemoService) *DemoServiceProcessor {

	self4 := &DemoServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self4.processorMap["calculate"] = &demoServiceProcessorCalculate{handler: handler}
	self4.processorMap["randomGenerator"] = &demoServiceProcessorRandomGenerator{handler: handler}
	return self4
}

func (p *DemoServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x5 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x5.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x5

}

type demoServiceProcessorCalculate struct {
	handler DemoService
}

func (p *demoServiceProcessorCalculate) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DemoServiceCalculateArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("calculate", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DemoServiceCalculateResult{}
	var retval float64
	var err2 error
	if retval, err2 = p.handler.Calculate(args.Input); err2 != nil {
		switch v := err2.(type) {
		case *InputException:
			result.InvalidInput = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing calculate: "+err2.Error())
			oprot.WriteMessageBegin("calculate", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("calculate", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type demoServiceProcessorRandomGenerator struct {
	handler DemoService
}

func (p *demoServiceProcessorRandomGenerator) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DemoServiceRandomGeneratorArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("randomGenerator", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DemoServiceRandomGeneratorResult{}
	var retval []int64
	var err2 error
	if retval, err2 = p.handler.RandomGenerator(args.Min, args.Max, args.Size); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing randomGenerator: "+err2.Error())
		oprot.WriteMessageBegin("randomGenerator", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("randomGenerator", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Input
type DemoServiceCalculateArgs struct {
	Input *CalculateInput `thrift:"input,1" json:"input"`
}

func NewDemoServiceCalculateArgs() *DemoServiceCalculateArgs {
	return &DemoServiceCalculateArgs{}
}

var DemoServiceCalculateArgs_Input_DEFAULT *CalculateInput

func (p *DemoServiceCalculateArgs) GetInput() *CalculateInput {
	if !p.IsSetInput() {
		return DemoServiceCalculateArgs_Input_DEFAULT
	}
	return p.Input
}
func (p *DemoServiceCalculateArgs) IsSetInput() bool {
	return p.Input != nil
}

func (p *DemoServiceCalculateArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DemoServiceCalculateArgs) readField1(iprot thrift.TProtocol) error {
	p.Input = &CalculateInput{}
	if err := p.Input.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Input), err)
	}
	return nil
}

func (p *DemoServiceCalculateArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("calculate_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DemoServiceCalculateArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("input", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:input: ", p), err)
	}
	if err := p.Input.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Input), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:input: ", p), err)
	}
	return err
}

func (p *DemoServiceCalculateArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DemoServiceCalculateArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - InvalidInput
type DemoServiceCalculateResult struct {
	Success      *float64        `thrift:"success,0" json:"success,omitempty"`
	InvalidInput *InputException `thrift:"invalidInput,1" json:"invalidInput,omitempty"`
}

func NewDemoServiceCalculateResult() *DemoServiceCalculateResult {
	return &DemoServiceCalculateResult{}
}

var DemoServiceCalculateResult_Success_DEFAULT float64

func (p *DemoServiceCalculateResult) GetSuccess() float64 {
	if !p.IsSetSuccess() {
		return DemoServiceCalculateResult_Success_DEFAULT
	}
	return *p.Success
}

var DemoServiceCalculateResult_InvalidInput_DEFAULT *InputException

func (p *DemoServiceCalculateResult) GetInvalidInput() *InputException {
	if !p.IsSetInvalidInput() {
		return DemoServiceCalculateResult_InvalidInput_DEFAULT
	}
	return p.InvalidInput
}
func (p *DemoServiceCalculateResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DemoServiceCalculateResult) IsSetInvalidInput() bool {
	return p.InvalidInput != nil
}

func (p *DemoServiceCalculateResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DemoServiceCalculateResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *DemoServiceCalculateResult) readField1(iprot thrift.TProtocol) error {
	p.InvalidInput = &InputException{}
	if err := p.InvalidInput.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InvalidInput), err)
	}
	return nil
}

func (p *DemoServiceCalculateResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("calculate_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DemoServiceCalculateResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.DOUBLE, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteDouble(float64(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *DemoServiceCalculateResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetInvalidInput() {
		if err := oprot.WriteFieldBegin("invalidInput", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:invalidInput: ", p), err)
		}
		if err := p.InvalidInput.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InvalidInput), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:invalidInput: ", p), err)
		}
	}
	return err
}

func (p *DemoServiceCalculateResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DemoServiceCalculateResult(%+v)", *p)
}

// Attributes:
//  - Min
//  - Max
//  - Size
type DemoServiceRandomGeneratorArgs struct {
	Min  int64 `thrift:"min,1,required" json:"min"`
	Max  int64 `thrift:"max,2,required" json:"max"`
	Size int64 `thrift:"size,3,required" json:"size"`
}

func NewDemoServiceRandomGeneratorArgs() *DemoServiceRandomGeneratorArgs {
	return &DemoServiceRandomGeneratorArgs{}
}

func (p *DemoServiceRandomGeneratorArgs) GetMin() int64 {
	return p.Min
}

func (p *DemoServiceRandomGeneratorArgs) GetMax() int64 {
	return p.Max
}

func (p *DemoServiceRandomGeneratorArgs) GetSize() int64 {
	return p.Size
}
func (p *DemoServiceRandomGeneratorArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetMin bool = false
	var issetMax bool = false
	var issetSize bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetMin = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetMax = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetSize = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetMin {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Min is not set"))
	}
	if !issetMax {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Max is not set"))
	}
	if !issetSize {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Size is not set"))
	}
	return nil
}

func (p *DemoServiceRandomGeneratorArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Min = v
	}
	return nil
}

func (p *DemoServiceRandomGeneratorArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Max = v
	}
	return nil
}

func (p *DemoServiceRandomGeneratorArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Size = v
	}
	return nil
}

func (p *DemoServiceRandomGeneratorArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("randomGenerator_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DemoServiceRandomGeneratorArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("min", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:min: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Min)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.min (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:min: ", p), err)
	}
	return err
}

func (p *DemoServiceRandomGeneratorArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("max", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:max: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Max)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.max (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:max: ", p), err)
	}
	return err
}

func (p *DemoServiceRandomGeneratorArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("size", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:size: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Size)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.size (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:size: ", p), err)
	}
	return err
}

func (p *DemoServiceRandomGeneratorArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DemoServiceRandomGeneratorArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DemoServiceRandomGeneratorResult struct {
	Success []int64 `thrift:"success,0" json:"success,omitempty"`
}

func NewDemoServiceRandomGeneratorResult() *DemoServiceRandomGeneratorResult {
	return &DemoServiceRandomGeneratorResult{}
}

var DemoServiceRandomGeneratorResult_Success_DEFAULT []int64

func (p *DemoServiceRandomGeneratorResult) GetSuccess() []int64 {
	return p.Success
}
func (p *DemoServiceRandomGeneratorResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DemoServiceRandomGeneratorResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DemoServiceRandomGeneratorResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int64, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem6 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem6 = v
		}
		p.Success = append(p.Success, _elem6)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *DemoServiceRandomGeneratorResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("randomGenerator_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DemoServiceRandomGeneratorResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteI64(int64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *DemoServiceRandomGeneratorResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DemoServiceRandomGeneratorResult(%+v)", *p)
}
